//=require jqueryform
//=require three
//=require orbitcontrols
//=require ColladaLoader

function success(response) {
  if(response != "") {
    location.reload(false)
  } else {
    alert("failed to add comment")
  }
}





$(document).ready(function() {
  var options = {
    clearForm:true,
    success: success
  };

  $('#comment-form').ajaxForm(options);

  $('.canvas-zone').width(window.innerWidth - $('.sidebar').width());
  $('.canvas-zone').height(window.innerHeight - 60);

  var container;

  var camera, controls, scene, renderer;

  var cross;

  init();
  animate();

  function init() {

    camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
    camera.position.z = 20;

    controls = new THREE.OrbitControls( camera );
    controls.addEventListener( 'change', render );

    scene = new THREE.Scene();
    window.scene = scene;
    //scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );

        // world

        //cube = new THREE.Mesh( new THREE.CubeGeometry( 200, 200, 200 ), new THREE.MeshNormalMaterial() );
        var manager = new THREE.LoadingManager();
        manager.onProgress = function ( item, loaded, total ) {

          console.log( item, loaded, total );

        };

        //scene.add( cube );

        var diffuseTexture = new THREE.Texture();
        var normalTexture = new THREE.Texture();

        var loader = new THREE.ImageLoader( manager );
        loader.load($('.canvas-zone').data('diffuse'), function ( image ) {
          diffuseTexture.image = image;
          diffuseTexture.needsUpdate = true;
        } );

        var loader = new THREE.ImageLoader( manager );
        loader.load($('.canvas-zone').data('normal'), function ( image ) {
          normalTexture.image = image;
          normalTexture.needsUpdate = true;
        } );

        if(diffuseTexture !== 'undefined') {
          var material =  new THREE.MeshPhongMaterial( {
            map: diffuseTexture,
            normalMap: normalTexture
          });
        } else {

        }

        var loader = new THREE.ColladaLoader();

        loader.load($('.canvas-zone').data('url'), function (result) {
          var colladaData = result.scene;
          colladaData.scale.x = colladaData.scale.y = colladaData.scale.z = 2;
          colladaData.updateMatrix();
          window.colladaModel = colladaData;

          colladaData.traverse( function ( child ) {

            if ( child instanceof THREE.Mesh ) {

              child.material = material;

            }

          } );

          scene.add(colladaData);
        });


        // lights

        light = new THREE.DirectionalLight( 0xffffff );
        light.position.set( 1, 1, 1 );
        scene.add( light );

        light = new THREE.DirectionalLight( 0x002288 );
        light.position.set( -1, -1, -1 );
        scene.add( light );

        light = new THREE.AmbientLight( 0x222222 );
        scene.add( light );


        // renderer

        renderer = new THREE.WebGLRenderer( { antialias: true } );
        //renderer.setClearColor( scene.fog.color, 1 );
        renderer.setSize( window.innerWidth - $('.sidebar').width(), window.innerHeight - 60 );

        container = $('.canvas-zone')[0]
        container.appendChild( renderer.domElement );


        //

        window.addEventListener( 'resize', onWindowResize, false );

      }

      function onWindowResize() {

        camera.aspect = window.innerWidth - $('.sidebar').width() / window.innerHeight - 60;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth - $('.sidebar').width(), window.innerHeight - 60);

        render();

      }

      function animate() {

        requestAnimationFrame( animate );
        controls.update();

      }

      function render() {

        renderer.render( scene, camera );
      }

    });